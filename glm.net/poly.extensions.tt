<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
// Autogenerated <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffffff")#>

using System;


<#
    int maxdim = 11;

    try
    {
        string path = Host.ResolvePath("maxdim.txt");

        maxdim = int.Parse(File.ReadAllText(path).Trim()) + 1;
    }
    catch { }
#>
namespace GlmNet
{
#if DOUBLE_PRECISION
    using scalar = Double;
#else
    using scalar = Single;
#endif

    public readonly partial struct poly
	{
        /// <summary>
        /// Returns the Hurwitz Matrix associated with this polynomial
        /// </summary>
	    public dynamic HurwitzMatrix
		{
		    get
			{
			    // TODO : fix this

			    switch (Degree)
				{
				    case -1:
				    case 0:
                        throw new InvalidOperationException("The Hurwitz matrix is not defined for polynomials of degree zero.");
				    case 1:
					    return LeadingCoefficient;
<#
    for (int i = 2; i < maxdim; ++i)
    {
#>
                    case <#=i#>:
				        return new mat<#=i#>(
<#
        for (int j = 0; j < i; ++j)
        {
            string s = "";
			int ident = j / 2;
            int offst = (j + 1) % 2;

            for (int k = 0; k < i; ++k)
            {
                int v = k * 2 + offst - 2 * ident;

                if (k < ident || v > i)
                    s +=  "0,          ";
				else
                    s += $"_coeff[{v,2}], ";
            }

            s = s.Trim();

            if (j == i - 1)
                s = s.TrimEnd(',');
#>
			                <#=s#>
<#
        }
#>
					    );
<#
    }
#>
                    default:
				        throw new NotImplementedException();
				}
			}
		}

<#
    for (int i = 2; i < 64; ++i)
    {
        string s_type = string.Join(", ", Enumerable.Range(0, i).Select(x => $"scalar _{x}"));
        string s_pars = string.Join(", ", Enumerable.Range(0, i).Select(x => $"t._{x}"));
#>
		public static implicit operator poly((<#=s_type#>) t) =>
		    new poly(<#=s_pars#>);
<#
    }
#>
	}
}
