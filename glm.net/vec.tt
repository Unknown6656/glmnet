<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
// Autogenerated <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffffff")#>

using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Linq;
using System;


namespace GlmNet
{
<#
	const int maxdim = 10;
	const string comp = "XYZW";


	for (int dim = 2; dim < maxdim; ++dim)
	{
		string typename = "vec" + dim;
		string[] comps = Enumerable.Range(0, dim).Select(i => "_" + i).ToArray();
#>
	#region <#=typename#>

	/// <summary>
    /// Represents a <#=dim#>-dimensional vector.
    /// </summary>
    /// <inheritdoc cref="ivec{V}"/>
	[StructLayout(LayoutKind.Sequential), NativeCppClass]
    public struct <#=typename#>
        : ivec<<#=typename#>>
    {
<#
		for (int i = 0; i < dim; ++i)
		{
#>
		private float <#=comps[i]#>;
<#
		}
#>


<#
		if (dim <= comp.Length)
			for (int i = 0; i < dim; ++i)
			{
#>
        /// <summary>
        /// Sets or gets the the vector's <#=comp[i]#>-coefficient
        /// </summary>
        public float <#=comp[i]#>
		{
			get => <#=comps[i]#>;
			set => <#=comps[i]#> = value;
		}

<#
			}
#>
        /// <inheritdoc/>
        public float this[int index]
        {
            get
            {
                switch (index)
                {
<#=string.Join("\n", Enumerable.Range(0, dim).Select(i => $"\t\t\t\t\tcase {i}: return {comps[i]};"))#>
                    default: throw new IndexOutOfRangeException();
                }
            }
            set
            {
<#
		for (int i = 0; i < dim; ++i)
		{
#>
				<#=i > 0 ? "else " : ""#>if (index == <#=i#>) <#=comps[i]#> = value;
<#
		}
#>
                else throw new IndexOutOfRangeException();
            }
        }
		
        /// <inheritdoc/>
        public int Size => <#=typename#>.Dimension;
		
        /// <inheritdoc/>
        public float Length => (float)Math.Sqrt(<#=string.Join(" + ", comps.Select(s => s + " * " + s)) #>);
		
        /// <inheritdoc/>
        public <#=typename#> Normalized => this / Length;

		
        /// <inheritdoc cref="ivec{V}.Size"/>
        public static int Dimension { get; } = <#=dim#>;
		
        /// <summary>
        /// The zero vector
        /// </summary>
        public static <#=typename#> Zero { get; } = new <#=typename#>(0);
<#
		if (dim <= comp.Length)
			for (int i = 0; i < dim; ++i)
			{
				int[] tuple = new int[dim];
				tuple[i] = 1;
#>

        /// <summary>
        /// The unit vector in <#=comp[i]#>-direction
        /// </summary>
        public static <#=typename#> Unit<#=comp[i]#> { get; } = (<#=string.Join(", ", tuple)#>);
<#
			}
#>


		/// <summary>
        /// Creates a new <#=dim#>-dimensional uniform vector
        /// </summary>
        /// <param name="s">The coefficients' value</param>
        public <#=typename#>(float s)
            : this(<#=string.Join(", ", Enumerable.Repeat("s", dim))#>)
        {
        }
		
		/// <summary>
        /// Creates a new <#=dim#>-dimensional vector
        /// </summary>
        public <#=typename#>(<#=string.Join(", ", Enumerable.Range(0, dim).Select(i => "float x" + i))#>)
        {
<#
		for (int i = 0; i < dim; ++i)
		{
#>
			<#=comps[i]#> = x<#=i#>;
<#
		}
#>
		}
<#
		for (int i = dim; i < maxdim; ++i)
		{
#>

		/// <summary>
        /// Creates a new <#=dim#>-dimensional vector from the given <#=i#>-dimensional one
        /// </summary>
        /// <param name="v">The <#=i#>-dimensional vector</param>
        public <#=typename#>(vec<#=i#> v)
            : this(<#=string.Join(", ", Enumerable.Range(0, dim).Select(j => $"v[{j}]"))#>)
        {
        }
<#
		}

	    if (dim > 2)
	    {
#>

		/// <summary>
        /// Creates a new <#=dim#>-dimensional vector from the given <#=dim-1#>-dimensional one and an additional coefficient
        /// </summary>
        /// <param name="v">The <#=dim-1#>-dimensional vector</param>
        /// <param name="c">The additional coefficient</param>
        public <#=typename#>(vec<#=dim-1#> v, float c)
            : this(<#=string.Join(", ", Enumerable.Range(0, dim - 1).Select(j => $"v[{j}]"))#>, c)
        {
        }
<#
	    }
#>

		/// <summary>
        /// Creates a new <#=dim#>-dimensional vector from the given coefficient array
        /// </summary>
        /// <param name="v">The vector's coefficients</param>
        public <#=typename#>(IEnumerable<float> v)
            : this() => FromArray(v?.ToArray() ?? new float[<#=dim#>]);
			
			
        /// <inheritdoc/>
		public float Dot(<#=typename#> other) => (this * other).ToArray().Sum();
		
        /// <inheritdoc/>
		public bool IsLinearIndependent(<#=typename#> other) => !(this / other).is_zero();

        /// <inheritdoc/>
        public int CompareTo(<#=typename#> other) => Length.CompareTo(other.Length);

        /// <inheritdoc/>
        public override string ToString() => $"(<#=string.Join(", ", comps.Select(s => "{" + s + "}"))#>)";
		
        /// <inheritdoc/>
        public void FromArray(params float[] v)
        {
            for (int i = 0; i < Dimension; ++i)
                this[i] = i < v.Length ? v[i] : 0;
        }
		
        /// <inheritdoc/>
        public float[] ToArray() => new[] { <#=string.Join(", ", comps)#> };

        /// <inheritdoc/>
        public override bool Equals(object obj) => obj is <#=typename#> v<#=string.Concat(comps.Select(s => $" && v.{s}.@is({s})"))#>;

        /// <inheritdoc/>
        public override int GetHashCode() => <#=string.Join(" ^ ", comps.Select(s => s + ".GetHashCode()"))#>;

		
        /// <inheritdoc cref="ivec{V}.Dot"/>
		public static float Dot(<#=typename#> v1, <#=typename#> v2) => v1.Dot(v2);
		
        /// <inheritdoc cref="ivec{V}.IsLinearIndependent"/>
		public static bool IsLinearIndependent(<#=typename#> v1, <#=typename#> v2) => v1.IsLinearIndependent(v2);


        public static <#=typename#> operator ~(<#=typename#> v) => v.Normalized;

        public static <#=typename#> operator -(<#=typename#> v) => v * -1;

        public static <#=typename#> operator +(<#=typename#> v1, <#=typename#> v2) => (<#=string.Join(", ", comps.Select(s => $"v1.{s} + v2.{s}"))#>);

        public static <#=typename#> operator +(<#=typename#> v, float f) => v + new <#=typename#>(f);

        public static <#=typename#> operator -(<#=typename#> v1, <#=typename#> v2) => v1 + -v2;

        public static <#=typename#> operator -(<#=typename#> v, float f) => v + -f;

        public static <#=typename#> operator *(<#=typename#> v, float f) => v * new <#=typename#>(f);

        public static <#=typename#> operator *(float f, <#=typename#> v) => v * f;

        public static <#=typename#> operator -(float f, <#=typename#> v) => -v + f;

        public static <#=typename#> operator *(<#=typename#> v1, <#=typename#> v2) => (<#=string.Join(", ", comps.Select(s => $"v1.{s} * v2.{s}"))#>);

        public static <#=typename#> operator /(<#=typename#> v, float f) => v * (1 / f);

        public static float operator /(<#=typename#> v1, <#=typename#> v2)
        {
            float[] components = v1.ToArray().Zip(v2.ToArray(), (x1, x2) => x1 / x2).Distinct().ToArray();

            return components.Length == 1 ? components[0] : float.NaN;
        }

        public static bool operator <(<#=typename#> v1, <#=typename#> v2) => v1.Length < v2.Length;

        public static bool operator >(<#=typename#> v1, <#=typename#> v2) => v1.Length > v2.Length;

        public static bool operator <=(<#=typename#> v1, <#=typename#> v2) => v1.Length <= v2.Length;

        public static bool operator >=(<#=typename#> v1, <#=typename#> v2) => v1.Length >= v2.Length;

        public static bool operator ==(<#=typename#> v1, <#=typename#> v2) => v1.Equals(v2);

        public static bool operator !=(<#=typename#> v1, <#=typename#> v2) => !(v1 == v2);

        public static implicit operator (<#=string.Join(", ", Enumerable.Range(0, dim).Select(i => "float x" + i))#>) (<#=typename#> v) => (<#=string.Join(", ", comps.Select(s => "v." + s))#>);

        public static implicit operator <#=typename#>((<#=string.Join(", ", Enumerable.Range(0, dim).Select(i => "float x" + i))#>) t) => new <#=typename#>(<#=string.Join(", ", Enumerable.Range(0, dim).Select(i => "t.x" + i))#>);
    }

	#endregion
<#
	}
#>
}
